package main;

public class Bord {
	private static final int NONE = 0; //何も置いてない
	public static final int WHITE = 1; //白の駒が置いてある
	public static final int BLACK = 2; //黒の駒が置いてある
	private int state[][] = new int[8][8]; //盤面の状態

	Bord(){
		init();
	}

	public int victory(){
		int whitePieceNum = 0; //白の総数
		int blackPieceNum = 0; //黒の総数

		for(int i = 0; i < 8; i++){
			for(int j = 0; j < 8; j++){
				if(state[i][j] == WHITE){
					whitePieceNum++;
				}else if (state[i][j] == BLACK){
					blackPieceNum++;
				}
			}
		}

		if(whitePieceNum < blackPieceNum){
			//黒の勝ち
			return BLACK;
		}else{
			//白の勝ち
			return WHITE;
		}
	}

	//おけるかどうかチェック
	public boolean putCheck(int x, int y, int color){
		boolean vretical, horizontal, skew;

		if (state[x][y] == NONE){
			vretical = checkVertical(x, y, color); //縦列チェック
			horizontal = checkHorizontal(x, y, color); //横列チェック
			skew = checkSkew(x, y, color); //斜め列チェック

			if (vretical || horizontal || skew){
				return true;
			}
		}

		return false;
	}

	//盤面が埋まっているかチェック
	public boolean checkEnd(){
		for(int i = 0; i < 8; i++){
			for(int j = 0; j < 8; j++){
				//一つでも埋まってなかったらfalse
				if (state[i][j] == NONE){
					return false;
				}
			}
		}
		//全て埋まっていたからtrue
		return true;
	}

	public int getState(int x, int y){
		return state[x][y];
	}

	public boolean put(int x, int y, int color){
		flag = true;
		boolean check1, check2, check3;
		if (state[x][y] == NONE){
			check1 = checkVertical(x, y, color);
			check2 = checkHorizontal(x, y, color);
			check3 = checkSkew(x, y, color);
			if (check1 || check2 || check3){
				state[x][y] = color;
				return true;
			}
		}
		return false;
	}

	/*盤面状態初期化*/
	public void init(){
		for(int i = 0; i < 8; i++){
			for(int j = 0; j < 8; j++){
				state[i][j] = NONE;
			}
		}
		state[3][3] = WHITE;
		state[4][3] = BLACK;
		state[3][4] = BLACK;
		state[4][4] = WHITE;
	}

	/*縦列チェック*/
	private boolean checkVertical(int x, int y, int color){
		int put = 0;
		if (y != 0){
			if (state[x][y-1] != color && state[x][y-1] != NONE){
				for (int i = y-2; i >= 0; i--){
					if (state[x][i] == color){
						for (int j = y-1; j > i; j--){
							reverse(x, j ,color);
						}
						put++;
						break;
					}
				}
			}
		}

		if (y != 7){
			if (state[x][y+1] != color && state[x][y+1] != NONE){
				for(int i = y+2; i < 8; i++){
					if (state[x][i] == color){
						for (int j = y+1; j < i; j++){
							reverse(x, j, color);
						}
						put++;
						break;
					}
				}
			}
		}
		if (put > 0) return true;
		return false;
	}

	private void reverse(int x, int y, int color){
		//System.out.println(x + ", " + y);
		if (color == WHITE){
			state[x][y] = WHITE;
		}else if(color == BLACK){
			state[x][y] = BLACK;
		}
	}

	/*横列チェック*/
	private boolean checkHorizontal(int x, int y, int color){
		int put = 0;
		if (x != 0){
			if (state[x-1][y] != color && state[x-1][y] != NONE){
				for (int i = x-2; i >= 0; i--){
					if (state[i][y] == color){
						if(flag){
							for (int j = x-1; j > i; j--){
								reverse(j, y ,color);
							}
						}
						put++;
						break;
					}
				}
			}
		}
		if (x != 7){
			if (state[x+1][y] != color && state[x+1][y] != NONE){
				for(int i = x+2; i < 8; i++){
					if (state[i][y] == color){
						if(flag){
							for (int j = x+1; j < i; j++){
								reverse(j, y, color);
							}
						}
						put++;
						break;
					}
				}
			}
		}
		if (put > 0) return true;
		return false;
	}

	/*斜め列チェック*/
	private boolean checkSkew(int x, int y, int color){
		boolean check1, check2, check3, check4;
		check1 = skewTopRight(x, y, color);
		check2 = skewTopLeft(x, y, color);
		check3 = skewUnderRight(x, y, color);
		check4 = skewUnderLeft(x, y, color);
		if (check1 || check2 || check3 || check4){
			return true;
		}
		return false;
	}


	/*斜め右上列チェック*/
	private boolean skewTopRight(int x, int y, int color){
		int put = 0;

		if (x+1 < 8 && y-1 >= 0){
			if (x+1 < 7 && y-1 > 0){
				if (state[x+1][y-1] != color && state[x+1][y-1] != NONE){
					for (int i = x+2, j = y-2; i < 8 && j >= 0; i++, j--){
						if (state[i][j] == color){
							if(flag){
								for (int i2 = x+1, j2 = y-1; i2 <= i && j2 >= j; i2++, j2--){
									reverse(i2, j2, color);
								}
							}
							put++;
							break;
						}
					}
				}
			}
		}
		if(put > 0) return true;
		return false;
	}

	/*斜め左上列チェック*/
	private boolean skewTopLeft(int x, int y, int color){
		int put = 0;
		if (x-1 > 0 && y-1 > 0){
			if (state[x-1][y-1] != color && state[x-1][y-1] != NONE){
				for(int i = x-2, j = y-2; i >= 0 && j >= 0; i--, j--){
					if (state[i][j] == color){
						if(flag){
							for(int i2 = x-1, j2 = y-1; i2 >= i && j2 >= j; i2--, j2--){
								reverse(i2, j2, color);
							}
						}
						put++;
						break;
					}
				}
			}
		}
		if (put > 0) return true;
		return false;
	}

	/*斜め右下列チェック*/
	private boolean skewUnderRight(int x, int y, int color){
		int put = 0;
		if (x+1 < 8 && y+1 < 8){
			if (state[x+1][y+1] != color && state[x+1][y+1] != NONE){
				for (int i = x+2, j = y+2; i < 8 && j < 8; i++, j++){
					if(state[i][j] == color){
						if(flag){
							for(int i2 = x+1, j2 = y+1; i2 < i && j2 < j; i2++, j2++){
								reverse(i2, j2, color);
							}
						}
						put++;
						break;
					}
				}
			}
		}
		if (put > 0) return true;
		return false;
	}

	/*斜め左下列チェック*/
	private boolean skewUnderLeft(int x, int y, int color){
		int put = 0;
		if (x-1 >= 0 && y+1 < 8){
			if (state[x-1][y+1] != color && state[x-1][y+1] != NONE){
				for (int i = x-2, j = y+2; i >= 0 && j < 8; i--, j++){
					if(state[i][j] == color){
						if(flag){
						for(int i2 = x-1, j2 = y+1; i2 > i && j2 < j; i2--, j2++){
							reverse(i2, j2, color);
						}
						}
						put++;
						break;
					}
				}
			}
		}
		if (put > 0) return true;
		return false;
	}
}
